package entities;

import java.awt.Rectangle;
import java.awt.image.BufferedImage;

import org.newdawn.slick.opengl.Texture;

public abstract class AbstractEntity implements Entity {

	protected double x;
	protected double y;
	protected double width;
	protected double height;
	protected static int tilesize;
	protected static BufferedImage sprite;
	protected static int spriteX;
	protected static int spriteY;
	protected static String path;
	protected double AT;
	protected Texture texture;
	private final Rectangle hitbox = new Rectangle();


	public AbstractEntity(double x, double y, double width, double height) {
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
//		this.setPath(path);
//		this.setTilesize(tilesize);
//		this.setSpriteX(spriteX);
//		this.setSpriteY(spriteY);
//		try {
//			this.texture = TextureLoader.getTexture("BMP", spriteStream(getSprite(0, 0)));
//		} catch (FileNotFoundException e) {
//			e.printStackTrace();
//		} catch (IOException e) {
//			e.printStackTrace();
//		}
	}

//	public static int getSpriteY() {
//		return spriteY;
//	}
//
//	public void setSpriteY(int spriteY) {
//		AbstractEntity.spriteY = spriteY;
//	}
//
//	public static int getSpriteX() {
//		return spriteX;
//	}
//
//	public void setSpriteX(int spriteX) {
//		AbstractEntity.spriteX = spriteX;
//	}
//
//	public void setTilesize(int size) {
//		this.tilesize = size;
//	}
	
//	public void setSprite(int x2, int y2) {
//		try {
//			this.texture = TextureLoader.getTexture("bmp", spriteStream(getSprite(x2, y2)));
//		} catch (IOException e) {
//			e.printStackTrace();
//			System.out.println("There was an unhandled error in setting texture");
//		}
//	}
	
	
//	public int getTilesize () {
//		return tilesize;
//	}
//	
//	public BufferedImage getTexture() {
//		return getSprite(getSpriteX(), getSpriteY());
//	}
//
//	@SuppressWarnings("static-access")
//	private void setPath(String path2) {
//		this.path = path2;
//	}
//	
//	@Override
//	public String getPath() {
//		return path;
//	}

	
	public void setLocation(double x, double y) {
		this.x = x;
		this.y = y;
	}

	@Override
	public void setX(double x) {
		this.x = x;
	}

	@Override
	public void setY(double y) {
		this.y = y;
	}

	@Override
	public void setWidth(double width) {
		this.width = width;
	}

	@Override
	public void setHeight(double height) {
		this.height = height;
	}

	@Override
	public double getX() {
		return x;
	}

	@Override
	public double getY() {
		return y;
	}

	public double getCenterX() {
		return x+(width/2);
	}

	@Override
	public double getCenterY() {
		return y+(height/2);
	}
	@Override
	public double getHeight() {
		return height;
	}

	@Override
	public double getWidth() {
		return width;
	}

	@Override
	public boolean intersects(Entity other) {
		hitbox.setBounds((int) x, (int) y, (int) width, (int) height);
		return hitbox.intersects(other.getX(), other.getY(), other.getWidth(), other.getHeight());
	}
	public double getIntersectAt(Entity other, Entity primary) {
		if (intersects(other)) {
			AT= other.getY() - primary.getY();
			return AT;
		}
		return AT;
	}
//	public static BufferedImage getSprite(int xGrid, int yGrid) {
//		if (sprite == null) {
//			try {
//				sprite = ImageIO.read(new File(path));
//			} catch (IOException e) {
//				e.printStackTrace();
//				System.out.println("Error loading SpriteSheet File.");
//			}
//		}
//		return sprite.getSubimage(xGrid * getSpriteX(), yGrid * getSpriteY(), getSpriteX() , getSpriteY());
//	}
//	private InputStream spriteStream(BufferedImage bi) {
//		ByteArrayOutputStream os = new ByteArrayOutputStream();
//		try {
//			ImageIO.write(bi, "bmp", os);
//		} catch (IOException e) {
//			e.printStackTrace();
//		}
//		return new ByteArrayInputStream(os.toByteArray(), 0, os.size());
//	}

}